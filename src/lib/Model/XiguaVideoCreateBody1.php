<?php
/**
 * XiguaVideoCreateBody1
 *
 * PHP version 5
 *
 * @category Class
 * @package  swagger_client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.20
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace swagger_client\Model;

use \ArrayAccess;
use swagger_client\ObjectSerializer;

/**
 * XiguaVideoCreateBody1 Class Doc Comment
 *
 * @category Class
 * @package  swagger_client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class XiguaVideoCreateBody1 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'body_1';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'video_id' => 'string',
'text' => 'string',
'praise' => 'bool',
'claim_origin' => 'bool',
'abstract' => 'string',
'cover_tsp' => 'int'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'video_id' => null,
'text' => null,
'praise' => null,
'claim_origin' => null,
'abstract' => null,
'cover_tsp' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'video_id' => 'video_id',
'text' => 'text',
'praise' => 'praise',
'claim_origin' => 'claim_origin',
'abstract' => 'abstract',
'cover_tsp' => 'cover_tsp'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'video_id' => 'setVideoId',
'text' => 'setText',
'praise' => 'setPraise',
'claim_origin' => 'setClaimOrigin',
'abstract' => 'setAbstract',
'cover_tsp' => 'setCoverTsp'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'video_id' => 'getVideoId',
'text' => 'getText',
'praise' => 'getPraise',
'claim_origin' => 'getClaimOrigin',
'abstract' => 'getAbstract',
'cover_tsp' => 'getCoverTsp'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['video_id'] = isset($data['video_id']) ? $data['video_id'] : null;
        $this->container['text'] = isset($data['text']) ? $data['text'] : null;
        $this->container['praise'] = isset($data['praise']) ? $data['praise'] : false;
        $this->container['claim_origin'] = isset($data['claim_origin']) ? $data['claim_origin'] : false;
        $this->container['abstract'] = isset($data['abstract']) ? $data['abstract'] : '';
        $this->container['cover_tsp'] = isset($data['cover_tsp']) ? $data['cover_tsp'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['video_id'] === null) {
            $invalidProperties[] = "'video_id' can't be null";
        }
        if ($this->container['text'] === null) {
            $invalidProperties[] = "'text' can't be null";
        }
        if ($this->container['praise'] === null) {
            $invalidProperties[] = "'praise' can't be null";
        }
        if ($this->container['claim_origin'] === null) {
            $invalidProperties[] = "'claim_origin' can't be null";
        }
        if ($this->container['abstract'] === null) {
            $invalidProperties[] = "'abstract' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets video_id
     *
     * @return string
     */
    public function getVideoId()
    {
        return $this->container['video_id'];
    }

    /**
     * Sets video_id
     *
     * @param string $video_id video_id, 通过/xigua/video/upload/接口得到
     *
     * @return $this
     */
    public function setVideoId($video_id)
    {
        $this->container['video_id'] = $video_id;

        return $this;
    }

    /**
     * Gets text
     *
     * @return string
     */
    public function getText()
    {
        return $this->container['text'];
    }

    /**
     * Sets text
     *
     * @param string $text 标题长度应该在5-30字之间
     *
     * @return $this
     */
    public function setText($text)
    {
        $this->container['text'] = $text;

        return $this;
    }

    /**
     * Gets praise
     *
     * @return bool
     */
    public function getPraise()
    {
        return $this->container['praise'];
    }

    /**
     * Sets praise
     *
     * @param bool $praise 是否给视频开通可以赞赏的入口
     *
     * @return $this
     */
    public function setPraise($praise)
    {
        $this->container['praise'] = $praise;

        return $this;
    }

    /**
     * Gets claim_origin
     *
     * @return bool
     */
    public function getClaimOrigin()
    {
        return $this->container['claim_origin'];
    }

    /**
     * Sets claim_origin
     *
     * @param bool $claim_origin 是否声明原创
     *
     * @return $this
     */
    public function setClaimOrigin($claim_origin)
    {
        $this->container['claim_origin'] = $claim_origin;

        return $this;
    }

    /**
     * Gets abstract
     *
     * @return string
     */
    public function getAbstract()
    {
        return $this->container['abstract'];
    }

    /**
     * Sets abstract
     *
     * @param string $abstract 视频简介，400字以内
     *
     * @return $this
     */
    public function setAbstract($abstract)
    {
        $this->container['abstract'] = $abstract;

        return $this;
    }

    /**
     * Gets cover_tsp
     *
     * @return int
     */
    public function getCoverTsp()
    {
        return $this->container['cover_tsp'];
    }

    /**
     * Sets cover_tsp
     *
     * @param int $cover_tsp 从视频中截取封面的时间，用该帧作为封面（单位为毫秒）
     *
     * @return $this
     */
    public function setCoverTsp($cover_tsp)
    {
        $this->container['cover_tsp'] = $cover_tsp;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
