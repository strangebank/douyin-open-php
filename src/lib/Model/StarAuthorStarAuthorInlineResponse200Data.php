<?php
/**
 * StarAuthorStarAuthorInlineResponse200Data
 *
 * PHP version 5
 *
 * @category Class
 * @package  swagger_client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.20
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace swagger_client\Model;

use \ArrayAccess;
use swagger_client\ObjectSerializer;

/**
 * StarAuthorStarAuthorInlineResponse200Data Class Doc Comment
 *
 * @category Class
 * @package  swagger_client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class StarAuthorStarAuthorInlineResponse200Data implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_data';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'error_code' => '\swagger_client\Model\StarAuthorStarAuthorErrorCode',
'description' => '\swagger_client\Model\StarAuthorStarAuthorDescription',
'update_timestamp' => 'int',
'nick_name' => 'string',
'follower' => 'int',
'spread_score' => 'double',
'cp_score' => 'double',
'growth_score' => 'double',
'cooperation_score' => 'double',
'shop_score' => 'double',
'star_score' => 'double'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'error_code' => null,
'description' => null,
'update_timestamp' => null,
'nick_name' => null,
'follower' => null,
'spread_score' => 'double',
'cp_score' => 'double',
'growth_score' => 'double',
'cooperation_score' => 'double',
'shop_score' => 'double',
'star_score' => 'double'    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'error_code' => 'error_code',
'description' => 'description',
'update_timestamp' => 'update_timestamp',
'nick_name' => 'nick_name',
'follower' => 'follower',
'spread_score' => 'spread_score',
'cp_score' => 'cp_score',
'growth_score' => 'growth_score',
'cooperation_score' => 'cooperation_score',
'shop_score' => 'shop_score',
'star_score' => 'star_score'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'error_code' => 'setErrorCode',
'description' => 'setDescription',
'update_timestamp' => 'setUpdateTimestamp',
'nick_name' => 'setNickName',
'follower' => 'setFollower',
'spread_score' => 'setSpreadScore',
'cp_score' => 'setCpScore',
'growth_score' => 'setGrowthScore',
'cooperation_score' => 'setCooperationScore',
'shop_score' => 'setShopScore',
'star_score' => 'setStarScore'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'error_code' => 'getErrorCode',
'description' => 'getDescription',
'update_timestamp' => 'getUpdateTimestamp',
'nick_name' => 'getNickName',
'follower' => 'getFollower',
'spread_score' => 'getSpreadScore',
'cp_score' => 'getCpScore',
'growth_score' => 'getGrowthScore',
'cooperation_score' => 'getCooperationScore',
'shop_score' => 'getShopScore',
'star_score' => 'getStarScore'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['error_code'] = isset($data['error_code']) ? $data['error_code'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['update_timestamp'] = isset($data['update_timestamp']) ? $data['update_timestamp'] : null;
        $this->container['nick_name'] = isset($data['nick_name']) ? $data['nick_name'] : null;
        $this->container['follower'] = isset($data['follower']) ? $data['follower'] : null;
        $this->container['spread_score'] = isset($data['spread_score']) ? $data['spread_score'] : null;
        $this->container['cp_score'] = isset($data['cp_score']) ? $data['cp_score'] : null;
        $this->container['growth_score'] = isset($data['growth_score']) ? $data['growth_score'] : null;
        $this->container['cooperation_score'] = isset($data['cooperation_score']) ? $data['cooperation_score'] : null;
        $this->container['shop_score'] = isset($data['shop_score']) ? $data['shop_score'] : null;
        $this->container['star_score'] = isset($data['star_score']) ? $data['star_score'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['error_code'] === null) {
            $invalidProperties[] = "'error_code' can't be null";
        }
        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets error_code
     *
     * @return \swagger_client\Model\StarAuthorStarAuthorErrorCode
     */
    public function getErrorCode()
    {
        return $this->container['error_code'];
    }

    /**
     * Sets error_code
     *
     * @param \swagger_client\Model\StarAuthorStarAuthorErrorCode $error_code error_code
     *
     * @return $this
     */
    public function setErrorCode($error_code)
    {
        $this->container['error_code'] = $error_code;

        return $this;
    }

    /**
     * Gets description
     *
     * @return \swagger_client\Model\StarAuthorStarAuthorDescription
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param \swagger_client\Model\StarAuthorStarAuthorDescription $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets update_timestamp
     *
     * @return int
     */
    public function getUpdateTimestamp()
    {
        return $this->container['update_timestamp'];
    }

    /**
     * Sets update_timestamp
     *
     * @param int $update_timestamp 达人指数更新时间戳
     *
     * @return $this
     */
    public function setUpdateTimestamp($update_timestamp)
    {
        $this->container['update_timestamp'] = $update_timestamp;

        return $this;
    }

    /**
     * Gets nick_name
     *
     * @return string
     */
    public function getNickName()
    {
        return $this->container['nick_name'];
    }

    /**
     * Sets nick_name
     *
     * @param string $nick_name 达人昵称
     *
     * @return $this
     */
    public function setNickName($nick_name)
    {
        $this->container['nick_name'] = $nick_name;

        return $this;
    }

    /**
     * Gets follower
     *
     * @return int
     */
    public function getFollower()
    {
        return $this->container['follower'];
    }

    /**
     * Sets follower
     *
     * @param int $follower 粉丝数
     *
     * @return $this
     */
    public function setFollower($follower)
    {
        $this->container['follower'] = $follower;

        return $this;
    }

    /**
     * Gets spread_score
     *
     * @return double
     */
    public function getSpreadScore()
    {
        return $this->container['spread_score'];
    }

    /**
     * Sets spread_score
     *
     * @param double $spread_score 传播指数
     *
     * @return $this
     */
    public function setSpreadScore($spread_score)
    {
        $this->container['spread_score'] = $spread_score;

        return $this;
    }

    /**
     * Gets cp_score
     *
     * @return double
     */
    public function getCpScore()
    {
        return $this->container['cp_score'];
    }

    /**
     * Sets cp_score
     *
     * @param double $cp_score 性价比指数
     *
     * @return $this
     */
    public function setCpScore($cp_score)
    {
        $this->container['cp_score'] = $cp_score;

        return $this;
    }

    /**
     * Gets growth_score
     *
     * @return double
     */
    public function getGrowthScore()
    {
        return $this->container['growth_score'];
    }

    /**
     * Sets growth_score
     *
     * @param double $growth_score 涨粉指数
     *
     * @return $this
     */
    public function setGrowthScore($growth_score)
    {
        $this->container['growth_score'] = $growth_score;

        return $this;
    }

    /**
     * Gets cooperation_score
     *
     * @return double
     */
    public function getCooperationScore()
    {
        return $this->container['cooperation_score'];
    }

    /**
     * Sets cooperation_score
     *
     * @param double $cooperation_score 合作指数
     *
     * @return $this
     */
    public function setCooperationScore($cooperation_score)
    {
        $this->container['cooperation_score'] = $cooperation_score;

        return $this;
    }

    /**
     * Gets shop_score
     *
     * @return double
     */
    public function getShopScore()
    {
        return $this->container['shop_score'];
    }

    /**
     * Sets shop_score
     *
     * @param double $shop_score 种草指数
     *
     * @return $this
     */
    public function setShopScore($shop_score)
    {
        $this->container['shop_score'] = $shop_score;

        return $this;
    }

    /**
     * Gets star_score
     *
     * @return double
     */
    public function getStarScore()
    {
        return $this->container['star_score'];
    }

    /**
     * Sets star_score
     *
     * @param double $star_score 星图指数
     *
     * @return $this
     */
    public function setStarScore($star_score)
    {
        $this->container['star_score'] = $star_score;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
