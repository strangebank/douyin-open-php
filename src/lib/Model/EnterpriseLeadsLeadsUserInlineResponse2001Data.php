<?php
/**
 * EnterpriseLeadsLeadsUserInlineResponse2001Data
 *
 * PHP version 5
 *
 * @category Class
 * @package  swagger_client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 企业号意向用户管理
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.20
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace swagger_client\Model;

use \ArrayAccess;
use swagger_client\ObjectSerializer;

/**
 * EnterpriseLeadsLeadsUserInlineResponse2001Data Class Doc Comment
 *
 * @category Class
 * @package  swagger_client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EnterpriseLeadsLeadsUserInlineResponse2001Data implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_1_data';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'error_code' => '\swagger_client\Model\EnterpriseLeadsLeadsUserErrorCode',
'description' => '\swagger_client\Model\EnterpriseLeadsLeadsUserDescription',
'open_id' => 'string',
'nickname' => 'string',
'avatar' => 'string',
'telephone' => 'string',
'wechat' => 'string',
'city' => 'string',
'gender' => 'int',
'age' => 'int',
'leads_level' => 'int',
'tag_list' => '\swagger_client\Model\EnterpriseLeadsLeadsUserInlineResponse200DataTagList[]',
'is_follow' => 'bool'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'error_code' => null,
'description' => null,
'open_id' => null,
'nickname' => null,
'avatar' => null,
'telephone' => null,
'wechat' => null,
'city' => null,
'gender' => null,
'age' => null,
'leads_level' => null,
'tag_list' => null,
'is_follow' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'error_code' => 'error_code',
'description' => 'description',
'open_id' => 'open_id',
'nickname' => 'nickname',
'avatar' => 'avatar',
'telephone' => 'telephone',
'wechat' => 'wechat',
'city' => 'city',
'gender' => 'gender',
'age' => 'age',
'leads_level' => 'leads_level',
'tag_list' => 'tag_list',
'is_follow' => 'is_follow'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'error_code' => 'setErrorCode',
'description' => 'setDescription',
'open_id' => 'setOpenId',
'nickname' => 'setNickname',
'avatar' => 'setAvatar',
'telephone' => 'setTelephone',
'wechat' => 'setWechat',
'city' => 'setCity',
'gender' => 'setGender',
'age' => 'setAge',
'leads_level' => 'setLeadsLevel',
'tag_list' => 'setTagList',
'is_follow' => 'setIsFollow'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'error_code' => 'getErrorCode',
'description' => 'getDescription',
'open_id' => 'getOpenId',
'nickname' => 'getNickname',
'avatar' => 'getAvatar',
'telephone' => 'getTelephone',
'wechat' => 'getWechat',
'city' => 'getCity',
'gender' => 'getGender',
'age' => 'getAge',
'leads_level' => 'getLeadsLevel',
'tag_list' => 'getTagList',
'is_follow' => 'getIsFollow'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const ENTERPRISE_LEADS_LEADS_USER_GENDER_0 = 0;
const ENTERPRISE_LEADS_LEADS_USER_GENDER_1 = 1;
const ENTERPRISE_LEADS_LEADS_USER_GENDER_2 = 2;
const ENTERPRISE_LEADS_LEADS_USER_LEADS_LEVEL_MINUS_1 = -1;
const ENTERPRISE_LEADS_LEADS_USER_LEADS_LEVEL_0 = 0;
const ENTERPRISE_LEADS_LEADS_USER_LEADS_LEVEL_1 = 1;
const ENTERPRISE_LEADS_LEADS_USER_LEADS_LEVEL_2 = 2;
const ENTERPRISE_LEADS_LEADS_USER_LEADS_LEVEL_10 = 10;

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGenderAllowableValues()
    {
        return [
            self::ENTERPRISE_LEADS_LEADS_USER_GENDER_0,
            self::ENTERPRISE_LEADS_LEADS_USER_GENDER_1,
            self::ENTERPRISE_LEADS_LEADS_USER_GENDER_2,''
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLeadsLevelAllowableValues()
    {
        return [
            self::ENTERPRISE_LEADS_LEADS_USER_LEADS_LEVEL_MINUS_1,
            self::ENTERPRISE_LEADS_LEADS_USER_LEADS_LEVEL_0,
            self::ENTERPRISE_LEADS_LEADS_USER_LEADS_LEVEL_1,
            self::ENTERPRISE_LEADS_LEADS_USER_LEADS_LEVEL_2,
            self::ENTERPRISE_LEADS_LEADS_USER_LEADS_LEVEL_10,''
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['error_code'] = isset($data['error_code']) ? $data['error_code'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['open_id'] = isset($data['open_id']) ? $data['open_id'] : null;
        $this->container['nickname'] = isset($data['nickname']) ? $data['nickname'] : null;
        $this->container['avatar'] = isset($data['avatar']) ? $data['avatar'] : null;
        $this->container['telephone'] = isset($data['telephone']) ? $data['telephone'] : null;
        $this->container['wechat'] = isset($data['wechat']) ? $data['wechat'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['gender'] = isset($data['gender']) ? $data['gender'] : null;
        $this->container['age'] = isset($data['age']) ? $data['age'] : null;
        $this->container['leads_level'] = isset($data['leads_level']) ? $data['leads_level'] : null;
        $this->container['tag_list'] = isset($data['tag_list']) ? $data['tag_list'] : null;
        $this->container['is_follow'] = isset($data['is_follow']) ? $data['is_follow'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['error_code'] === null) {
            $invalidProperties[] = "'error_code' can't be null";
        }
        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        $allowedValues = $this->getGenderAllowableValues();
        if (!is_null($this->container['gender']) && !in_array($this->container['gender'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'gender', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLeadsLevelAllowableValues();
        if (!is_null($this->container['leads_level']) && !in_array($this->container['leads_level'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'leads_level', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets error_code
     *
     * @return \swagger_client\Model\EnterpriseLeadsLeadsUserErrorCode
     */
    public function getErrorCode()
    {
        return $this->container['error_code'];
    }

    /**
     * Sets error_code
     *
     * @param \swagger_client\Model\EnterpriseLeadsLeadsUserErrorCode $error_code error_code
     *
     * @return $this
     */
    public function setErrorCode($error_code)
    {
        $this->container['error_code'] = $error_code;

        return $this;
    }

    /**
     * Gets description
     *
     * @return \swagger_client\Model\EnterpriseLeadsLeadsUserDescription
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param \swagger_client\Model\EnterpriseLeadsLeadsUserDescription $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets open_id
     *
     * @return string
     */
    public function getOpenId()
    {
        return $this->container['open_id'];
    }

    /**
     * Sets open_id
     *
     * @param string $open_id 用户在当前应用的唯一标识
     *
     * @return $this
     */
    public function setOpenId($open_id)
    {
        $this->container['open_id'] = $open_id;

        return $this;
    }

    /**
     * Gets nickname
     *
     * @return string
     */
    public function getNickname()
    {
        return $this->container['nickname'];
    }

    /**
     * Sets nickname
     *
     * @param string $nickname nickname
     *
     * @return $this
     */
    public function setNickname($nickname)
    {
        $this->container['nickname'] = $nickname;

        return $this;
    }

    /**
     * Gets avatar
     *
     * @return string
     */
    public function getAvatar()
    {
        return $this->container['avatar'];
    }

    /**
     * Sets avatar
     *
     * @param string $avatar avatar
     *
     * @return $this
     */
    public function setAvatar($avatar)
    {
        $this->container['avatar'] = $avatar;

        return $this;
    }

    /**
     * Gets telephone
     *
     * @return string
     */
    public function getTelephone()
    {
        return $this->container['telephone'];
    }

    /**
     * Sets telephone
     *
     * @param string $telephone telephone
     *
     * @return $this
     */
    public function setTelephone($telephone)
    {
        $this->container['telephone'] = $telephone;

        return $this;
    }

    /**
     * Gets wechat
     *
     * @return string
     */
    public function getWechat()
    {
        return $this->container['wechat'];
    }

    /**
     * Sets wechat
     *
     * @param string $wechat wechat
     *
     * @return $this
     */
    public function setWechat($wechat)
    {
        $this->container['wechat'] = $wechat;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string $city city
     *
     * @return $this
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return int
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param int $gender 性别 * `0` - 未知 * `1` - 男 * `2` - 女
     *
     * @return $this
     */
    public function setGender($gender)
    {
        $allowedValues = $this->getGenderAllowableValues();
        if (!is_null($gender) && !in_array($gender, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'gender', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets age
     *
     * @return int
     */
    public function getAge()
    {
        return $this->container['age'];
    }

    /**
     * Sets age
     *
     * @param int $age age
     *
     * @return $this
     */
    public function setAge($age)
    {
        $this->container['age'] = $age;

        return $this;
    }

    /**
     * Gets leads_level
     *
     * @return int
     */
    public function getLeadsLevel()
    {
        return $this->container['leads_level'];
    }

    /**
     * Sets leads_level
     *
     * @param int $leads_level 用户状态 * `-1` - 没兴趣 * `0` - 了解 * `1` - 有兴趣 * `2` - 有意愿 * `10` - 已转化
     *
     * @return $this
     */
    public function setLeadsLevel($leads_level)
    {
        $allowedValues = $this->getLeadsLevelAllowableValues();
        if (!is_null($leads_level) && !in_array($leads_level, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'leads_level', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['leads_level'] = $leads_level;

        return $this;
    }

    /**
     * Gets tag_list
     *
     * @return \swagger_client\Model\EnterpriseLeadsLeadsUserInlineResponse200DataTagList[]
     */
    public function getTagList()
    {
        return $this->container['tag_list'];
    }

    /**
     * Sets tag_list
     *
     * @param \swagger_client\Model\EnterpriseLeadsLeadsUserInlineResponse200DataTagList[] $tag_list 绑定的标签列表
     *
     * @return $this
     */
    public function setTagList($tag_list)
    {
        $this->container['tag_list'] = $tag_list;

        return $this;
    }

    /**
     * Gets is_follow
     *
     * @return bool
     */
    public function getIsFollow()
    {
        return $this->container['is_follow'];
    }

    /**
     * Sets is_follow
     *
     * @param bool $is_follow 当前指定用户是否已关注本企业号
     *
     * @return $this
     */
    public function setIsFollow($is_follow)
    {
        $this->container['is_follow'] = $is_follow;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
