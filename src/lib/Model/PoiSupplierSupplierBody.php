<?php
/**
 * PoiSupplierSupplierBody
 *
 * PHP version 5
 *
 * @category Class
 * @package  swagger_client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.20
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace swagger_client\Model;

use \ArrayAccess;
use swagger_client\ObjectSerializer;

/**
 * PoiSupplierSupplierBody Class Doc Comment
 *
 * @category Class
 * @package  swagger_client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PoiSupplierSupplierBody implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'body';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'supplier_ext_id' => 'string',
'type' => '\swagger_client\Model\PoiSupplierSupplierSupplierType',
'poi_id' => 'string',
'status' => '\swagger_client\Model\PoiSupplierSupplierOnlineStatus',
'name' => 'string',
'images' => 'string[]',
'contact_phone' => 'string',
'contact_tel' => 'string',
'address' => 'string',
'description' => 'string',
'services' => '\swagger_client\Model\PoiSupplierSupplierPoisuppliersyncServices[]',
'attributes' => '\swagger_client\Model\PoiSupplierSupplierSupplierAttributes'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'supplier_ext_id' => null,
'type' => null,
'poi_id' => null,
'status' => null,
'name' => null,
'images' => null,
'contact_phone' => null,
'contact_tel' => null,
'address' => null,
'description' => null,
'services' => null,
'attributes' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'supplier_ext_id' => 'supplier_ext_id',
'type' => 'type',
'poi_id' => 'poi_id',
'status' => 'status',
'name' => 'name',
'images' => 'images',
'contact_phone' => 'contact_phone',
'contact_tel' => 'contact_tel',
'address' => 'address',
'description' => 'description',
'services' => 'services',
'attributes' => 'attributes'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'supplier_ext_id' => 'setSupplierExtId',
'type' => 'setType',
'poi_id' => 'setPoiId',
'status' => 'setStatus',
'name' => 'setName',
'images' => 'setImages',
'contact_phone' => 'setContactPhone',
'contact_tel' => 'setContactTel',
'address' => 'setAddress',
'description' => 'setDescription',
'services' => 'setServices',
'attributes' => 'setAttributes'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'supplier_ext_id' => 'getSupplierExtId',
'type' => 'getType',
'poi_id' => 'getPoiId',
'status' => 'getStatus',
'name' => 'getName',
'images' => 'getImages',
'contact_phone' => 'getContactPhone',
'contact_tel' => 'getContactTel',
'address' => 'getAddress',
'description' => 'getDescription',
'services' => 'getServices',
'attributes' => 'getAttributes'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['supplier_ext_id'] = isset($data['supplier_ext_id']) ? $data['supplier_ext_id'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['poi_id'] = isset($data['poi_id']) ? $data['poi_id'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['images'] = isset($data['images']) ? $data['images'] : null;
        $this->container['contact_phone'] = isset($data['contact_phone']) ? $data['contact_phone'] : null;
        $this->container['contact_tel'] = isset($data['contact_tel']) ? $data['contact_tel'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['services'] = isset($data['services']) ? $data['services'] : null;
        $this->container['attributes'] = isset($data['attributes']) ? $data['attributes'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['supplier_ext_id'] === null) {
            $invalidProperties[] = "'supplier_ext_id' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['poi_id'] === null) {
            $invalidProperties[] = "'poi_id' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['attributes'] === null) {
            $invalidProperties[] = "'attributes' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets supplier_ext_id
     *
     * @return string
     */
    public function getSupplierExtId()
    {
        return $this->container['supplier_ext_id'];
    }

    /**
     * Sets supplier_ext_id
     *
     * @param string $supplier_ext_id 接入方店铺id
     *
     * @return $this
     */
    public function setSupplierExtId($supplier_ext_id)
    {
        $this->container['supplier_ext_id'] = $supplier_ext_id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \swagger_client\Model\PoiSupplierSupplierSupplierType
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \swagger_client\Model\PoiSupplierSupplierSupplierType $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets poi_id
     *
     * @return string
     */
    public function getPoiId()
    {
        return $this->container['poi_id'];
    }

    /**
     * Sets poi_id
     *
     * @param string $poi_id 抖音poi id, 三方如果使用高德poi id可以通过/poi/query/接口转换，其它三方poi id走poi匹配功能进行抖音poi id获取
     *
     * @return $this
     */
    public function setPoiId($poi_id)
    {
        $this->container['poi_id'] = $poi_id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \swagger_client\Model\PoiSupplierSupplierOnlineStatus
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \swagger_client\Model\PoiSupplierSupplierOnlineStatus $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name 店铺名称
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets images
     *
     * @return string[]
     */
    public function getImages()
    {
        return $this->container['images'];
    }

    /**
     * Sets images
     *
     * @param string[] $images 店铺图片
     *
     * @return $this
     */
    public function setImages($images)
    {
        $this->container['images'] = $images;

        return $this;
    }

    /**
     * Gets contact_phone
     *
     * @return string
     */
    public function getContactPhone()
    {
        return $this->container['contact_phone'];
    }

    /**
     * Sets contact_phone
     *
     * @param string $contact_phone 联系手机号
     *
     * @return $this
     */
    public function setContactPhone($contact_phone)
    {
        $this->container['contact_phone'] = $contact_phone;

        return $this;
    }

    /**
     * Gets contact_tel
     *
     * @return string
     */
    public function getContactTel()
    {
        return $this->container['contact_tel'];
    }

    /**
     * Sets contact_tel
     *
     * @param string $contact_tel 联系座机号
     *
     * @return $this
     */
    public function setContactTel($contact_tel)
    {
        $this->container['contact_tel'] = $contact_tel;

        return $this;
    }

    /**
     * Gets address
     *
     * @return string
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string $address 店铺地址
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description 店铺介绍(<=500字)
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets services
     *
     * @return \swagger_client\Model\PoiSupplierSupplierPoisuppliersyncServices[]
     */
    public function getServices()
    {
        return $this->container['services'];
    }

    /**
     * Sets services
     *
     * @param \swagger_client\Model\PoiSupplierSupplierPoisuppliersyncServices[] $services 店铺提供的服务列表
     *
     * @return $this
     */
    public function setServices($services)
    {
        $this->container['services'] = $services;

        return $this;
    }

    /**
     * Gets attributes
     *
     * @return \swagger_client\Model\PoiSupplierSupplierSupplierAttributes
     */
    public function getAttributes()
    {
        return $this->container['attributes'];
    }

    /**
     * Sets attributes
     *
     * @param \swagger_client\Model\PoiSupplierSupplierSupplierAttributes $attributes attributes
     *
     * @return $this
     */
    public function setAttributes($attributes)
    {
        $this->container['attributes'] = $attributes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
