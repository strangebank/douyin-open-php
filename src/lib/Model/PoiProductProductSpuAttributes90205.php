<?php
/**
 * PoiProductProductSpuAttributes90205
 *
 * PHP version 5
 *
 * @category Class
 * @package  swagger_client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.20
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace swagger_client\Model;

use \ArrayAccess;
use swagger_client\ObjectSerializer;

/**
 * PoiProductProductSpuAttributes90205 Class Doc Comment
 *
 * @category Class
 * @description spu跳转入口
 * @package  swagger_client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PoiProductProductSpuAttributes90205 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'spu_attributes_90205';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'entry_type' => 'int',
'entry_mini_app' => '\swagger_client\Model\PoiProductProductSpuAttributes90205EntryMiniApp',
'entry_url' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'entry_type' => null,
'entry_mini_app' => null,
'entry_url' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'entry_type' => 'entry_type',
'entry_mini_app' => 'entry_mini_app',
'entry_url' => 'entry_url'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'entry_type' => 'setEntryType',
'entry_mini_app' => 'setEntryMiniApp',
'entry_url' => 'setEntryUrl'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'entry_type' => 'getEntryType',
'entry_mini_app' => 'getEntryMiniApp',
'entry_url' => 'getEntryUrl'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const POI_PRODUCT_PRODUCT_ENTRY_TYPE_1 = 1;
const POI_PRODUCT_PRODUCT_ENTRY_TYPE_2 = 2;

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEntryTypeAllowableValues()
    {
        return [
            self::POI_PRODUCT_PRODUCT_ENTRY_TYPE_1,
            self::POI_PRODUCT_PRODUCT_ENTRY_TYPE_2,''
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['entry_type'] = isset($data['entry_type']) ? $data['entry_type'] : null;
        $this->container['entry_mini_app'] = isset($data['entry_mini_app']) ? $data['entry_mini_app'] : null;
        $this->container['entry_url'] = isset($data['entry_url']) ? $data['entry_url'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getEntryTypeAllowableValues();
        if (!is_null($this->container['entry_type']) && !in_array($this->container['entry_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'entry_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets entry_type
     *
     * @return int
     */
    public function getEntryType()
    {
        return $this->container['entry_type'];
    }

    /**
     * Sets entry_type
     *
     * @param int $entry_type 入口类型(1:H5，2:抖音小程序，3:抖音链接)
     *
     * @return $this
     */
    public function setEntryType($entry_type)
    {
        $allowedValues = $this->getEntryTypeAllowableValues();
        if (!is_null($entry_type) && !in_array($entry_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'entry_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['entry_type'] = $entry_type;

        return $this;
    }

    /**
     * Gets entry_mini_app
     *
     * @return \swagger_client\Model\PoiProductProductSpuAttributes90205EntryMiniApp
     */
    public function getEntryMiniApp()
    {
        return $this->container['entry_mini_app'];
    }

    /**
     * Sets entry_mini_app
     *
     * @param \swagger_client\Model\PoiProductProductSpuAttributes90205EntryMiniApp $entry_mini_app entry_mini_app
     *
     * @return $this
     */
    public function setEntryMiniApp($entry_mini_app)
    {
        $this->container['entry_mini_app'] = $entry_mini_app;

        return $this;
    }

    /**
     * Gets entry_url
     *
     * @return string
     */
    public function getEntryUrl()
    {
        return $this->container['entry_url'];
    }

    /**
     * Sets entry_url
     *
     * @param string $entry_url 跳转链接
     *
     * @return $this
     */
    public function setEntryUrl($entry_url)
    {
        $this->container['entry_url'] = $entry_url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
