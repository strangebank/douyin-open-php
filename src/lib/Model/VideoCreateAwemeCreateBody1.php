<?php
/**
 * VideoCreateAwemeCreateBody1
 *
 * PHP version 5
 *
 * @category Class
 * @package  swagger_client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.20
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace swagger_client\Model;

use \ArrayAccess;
use swagger_client\ObjectSerializer;

/**
 * VideoCreateAwemeCreateBody1 Class Doc Comment
 *
 * @category Class
 * @package  swagger_client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class VideoCreateAwemeCreateBody1 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'body_1';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'video_id' => 'string',
'text' => 'string',
'poi_id' => 'string',
'poi_name' => 'string',
'micro_app_id' => 'string',
'micro_app_title' => 'string',
'micro_app_url' => 'string',
'article_id' => 'string',
'article_title' => 'string',
'timeliness_label' => 'int',
'timeliness_keyword' => 'string',
'game_id' => 'string',
'game_content' => 'string',
'cover_tsp' => 'double',
'at_users' => 'string[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'video_id' => null,
'text' => null,
'poi_id' => null,
'poi_name' => null,
'micro_app_id' => null,
'micro_app_title' => null,
'micro_app_url' => null,
'article_id' => null,
'article_title' => null,
'timeliness_label' => null,
'timeliness_keyword' => null,
'game_id' => null,
'game_content' => null,
'cover_tsp' => 'double',
'at_users' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'video_id' => 'video_id',
'text' => 'text',
'poi_id' => 'poi_id',
'poi_name' => 'poi_name',
'micro_app_id' => 'micro_app_id',
'micro_app_title' => 'micro_app_title',
'micro_app_url' => 'micro_app_url',
'article_id' => 'article_id',
'article_title' => 'article_title',
'timeliness_label' => 'timeliness_label',
'timeliness_keyword' => 'timeliness_keyword',
'game_id' => 'game_id',
'game_content' => 'game_content',
'cover_tsp' => 'cover_tsp',
'at_users' => 'at_users'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'video_id' => 'setVideoId',
'text' => 'setText',
'poi_id' => 'setPoiId',
'poi_name' => 'setPoiName',
'micro_app_id' => 'setMicroAppId',
'micro_app_title' => 'setMicroAppTitle',
'micro_app_url' => 'setMicroAppUrl',
'article_id' => 'setArticleId',
'article_title' => 'setArticleTitle',
'timeliness_label' => 'setTimelinessLabel',
'timeliness_keyword' => 'setTimelinessKeyword',
'game_id' => 'setGameId',
'game_content' => 'setGameContent',
'cover_tsp' => 'setCoverTsp',
'at_users' => 'setAtUsers'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'video_id' => 'getVideoId',
'text' => 'getText',
'poi_id' => 'getPoiId',
'poi_name' => 'getPoiName',
'micro_app_id' => 'getMicroAppId',
'micro_app_title' => 'getMicroAppTitle',
'micro_app_url' => 'getMicroAppUrl',
'article_id' => 'getArticleId',
'article_title' => 'getArticleTitle',
'timeliness_label' => 'getTimelinessLabel',
'timeliness_keyword' => 'getTimelinessKeyword',
'game_id' => 'getGameId',
'game_content' => 'getGameContent',
'cover_tsp' => 'getCoverTsp',
'at_users' => 'getAtUsers'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['video_id'] = isset($data['video_id']) ? $data['video_id'] : null;
        $this->container['text'] = isset($data['text']) ? $data['text'] : null;
        $this->container['poi_id'] = isset($data['poi_id']) ? $data['poi_id'] : null;
        $this->container['poi_name'] = isset($data['poi_name']) ? $data['poi_name'] : null;
        $this->container['micro_app_id'] = isset($data['micro_app_id']) ? $data['micro_app_id'] : null;
        $this->container['micro_app_title'] = isset($data['micro_app_title']) ? $data['micro_app_title'] : null;
        $this->container['micro_app_url'] = isset($data['micro_app_url']) ? $data['micro_app_url'] : null;
        $this->container['article_id'] = isset($data['article_id']) ? $data['article_id'] : null;
        $this->container['article_title'] = isset($data['article_title']) ? $data['article_title'] : null;
        $this->container['timeliness_label'] = isset($data['timeliness_label']) ? $data['timeliness_label'] : null;
        $this->container['timeliness_keyword'] = isset($data['timeliness_keyword']) ? $data['timeliness_keyword'] : null;
        $this->container['game_id'] = isset($data['game_id']) ? $data['game_id'] : null;
        $this->container['game_content'] = isset($data['game_content']) ? $data['game_content'] : null;
        $this->container['cover_tsp'] = isset($data['cover_tsp']) ? $data['cover_tsp'] : null;
        $this->container['at_users'] = isset($data['at_users']) ? $data['at_users'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['video_id'] === null) {
            $invalidProperties[] = "'video_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets video_id
     *
     * @return string
     */
    public function getVideoId()
    {
        return $this->container['video_id'];
    }

    /**
     * Sets video_id
     *
     * @param string $video_id video_id, 通过/video/upload/接口得到。注意每次调用/video/create/都要调用/video/upload/生成新的video_id。
     *
     * @return $this
     */
    public function setVideoId($video_id)
    {
        $this->container['video_id'] = $video_id;

        return $this;
    }

    /**
     * Gets text
     *
     * @return string
     */
    public function getText()
    {
        return $this->container['text'];
    }

    /**
     * Sets text
     *
     * @param string $text 视频标题， 可以带话题,@用户。 如title1#话题1 #话题2 @openid1  注意：   1. 话题审核依旧遵循抖音的审核逻辑，强烈建议第三方谨慎拟定话题名称，避免强导流行为。
     *
     * @return $this
     */
    public function setText($text)
    {
        $this->container['text'] = $text;

        return $this;
    }

    /**
     * Gets poi_id
     *
     * @return string
     */
    public function getPoiId()
    {
        return $this->container['poi_id'];
    }

    /**
     * Sets poi_id
     *
     * @param string $poi_id 地理位置id
     *
     * @return $this
     */
    public function setPoiId($poi_id)
    {
        $this->container['poi_id'] = $poi_id;

        return $this;
    }

    /**
     * Gets poi_name
     *
     * @return string
     */
    public function getPoiName()
    {
        return $this->container['poi_name'];
    }

    /**
     * Sets poi_name
     *
     * @param string $poi_name 地理位置名称
     *
     * @return $this
     */
    public function setPoiName($poi_name)
    {
        $this->container['poi_name'] = $poi_name;

        return $this;
    }

    /**
     * Gets micro_app_id
     *
     * @return string
     */
    public function getMicroAppId()
    {
        return $this->container['micro_app_id'];
    }

    /**
     * Sets micro_app_id
     *
     * @param string $micro_app_id 小程序id
     *
     * @return $this
     */
    public function setMicroAppId($micro_app_id)
    {
        $this->container['micro_app_id'] = $micro_app_id;

        return $this;
    }

    /**
     * Gets micro_app_title
     *
     * @return string
     */
    public function getMicroAppTitle()
    {
        return $this->container['micro_app_title'];
    }

    /**
     * Sets micro_app_title
     *
     * @param string $micro_app_title 小程序标题
     *
     * @return $this
     */
    public function setMicroAppTitle($micro_app_title)
    {
        $this->container['micro_app_title'] = $micro_app_title;

        return $this;
    }

    /**
     * Gets micro_app_url
     *
     * @return string
     */
    public function getMicroAppUrl()
    {
        return $this->container['micro_app_url'];
    }

    /**
     * Sets micro_app_url
     *
     * @param string $micro_app_url 吊起小程序时的参数
     *
     * @return $this
     */
    public function setMicroAppUrl($micro_app_url)
    {
        $this->container['micro_app_url'] = $micro_app_url;

        return $this;
    }

    /**
     * Gets article_id
     *
     * @return string
     */
    public function getArticleId()
    {
        return $this->container['article_id'];
    }

    /**
     * Sets article_id
     *
     * @param string $article_id 文章ID，暂不开放
     *
     * @return $this
     */
    public function setArticleId($article_id)
    {
        $this->container['article_id'] = $article_id;

        return $this;
    }

    /**
     * Gets article_title
     *
     * @return string
     */
    public function getArticleTitle()
    {
        return $this->container['article_title'];
    }

    /**
     * Sets article_title
     *
     * @param string $article_title 文章自定义标题，暂不开放
     *
     * @return $this
     */
    public function setArticleTitle($article_title)
    {
        $this->container['article_title'] = $article_title;

        return $this;
    }

    /**
     * Gets timeliness_label
     *
     * @return int
     */
    public function getTimelinessLabel()
    {
        return $this->container['timeliness_label'];
    }

    /**
     * Sets timeliness_label
     *
     * @param int $timeliness_label 时效新闻标签，1表示使用。暂不开放
     *
     * @return $this
     */
    public function setTimelinessLabel($timeliness_label)
    {
        $this->container['timeliness_label'] = $timeliness_label;

        return $this;
    }

    /**
     * Gets timeliness_keyword
     *
     * @return string
     */
    public function getTimelinessKeyword()
    {
        return $this->container['timeliness_keyword'];
    }

    /**
     * Sets timeliness_keyword
     *
     * @param string $timeliness_keyword 最多可添加3个，用`\\|`隔开。暂不开放
     *
     * @return $this
     */
    public function setTimelinessKeyword($timeliness_keyword)
    {
        $this->container['timeliness_keyword'] = $timeliness_keyword;

        return $this;
    }

    /**
     * Gets game_id
     *
     * @return string
     */
    public function getGameId()
    {
        return $this->container['game_id'];
    }

    /**
     * Sets game_id
     *
     * @param string $game_id 游戏id。暂不开放
     *
     * @return $this
     */
    public function setGameId($game_id)
    {
        $this->container['game_id'] = $game_id;

        return $this;
    }

    /**
     * Gets game_content
     *
     * @return string
     */
    public function getGameContent()
    {
        return $this->container['game_content'];
    }

    /**
     * Sets game_content
     *
     * @param string $game_content 游戏个性化参数
     *
     * @return $this
     */
    public function setGameContent($game_content)
    {
        $this->container['game_content'] = $game_content;

        return $this;
    }

    /**
     * Gets cover_tsp
     *
     * @return double
     */
    public function getCoverTsp()
    {
        return $this->container['cover_tsp'];
    }

    /**
     * Sets cover_tsp
     *
     * @param double $cover_tsp 将传入的指定时间点对应帧设置为视频封面（单位：秒）
     *
     * @return $this
     */
    public function setCoverTsp($cover_tsp)
    {
        $this->container['cover_tsp'] = $cover_tsp;

        return $this;
    }

    /**
     * Gets at_users
     *
     * @return string[]
     */
    public function getAtUsers()
    {
        return $this->container['at_users'];
    }

    /**
     * Sets at_users
     *
     * @param string[] $at_users 如果需要at其他用户。将text中@nickname对应的open_id放到这里。
     *
     * @return $this
     */
    public function setAtUsers($at_users)
    {
        $this->container['at_users'] = $at_users;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
