<?php
/**
 * DouyinPayDouyinPayBody
 *
 * PHP version 5
 *
 * @category Class
 * @package  swagger_client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.20
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace swagger_client\Model;

use \ArrayAccess;
use swagger_client\ObjectSerializer;

/**
 * DouyinPayDouyinPayBody Class Doc Comment
 *
 * @category Class
 * @package  swagger_client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DouyinPayDouyinPayBody implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'body';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'merchant_id' => 'int',
'live_id' => 'int',
'biz_order_no' => 'string',
'trans_code' => 'string',
'order_name' => 'string',
'order_desc' => 'string',
'amount' => 'int',
'remark' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'merchant_id' => 'int64',
'live_id' => 'int64',
'biz_order_no' => null,
'trans_code' => null,
'order_name' => null,
'order_desc' => null,
'amount' => 'int64',
'remark' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'merchant_id' => 'merchant_id',
'live_id' => 'live_id',
'biz_order_no' => 'biz_order_no',
'trans_code' => 'trans_code',
'order_name' => 'order_name',
'order_desc' => 'order_desc',
'amount' => 'amount',
'remark' => 'remark'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'merchant_id' => 'setMerchantId',
'live_id' => 'setLiveId',
'biz_order_no' => 'setBizOrderNo',
'trans_code' => 'setTransCode',
'order_name' => 'setOrderName',
'order_desc' => 'setOrderDesc',
'amount' => 'setAmount',
'remark' => 'setRemark'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'merchant_id' => 'getMerchantId',
'live_id' => 'getLiveId',
'biz_order_no' => 'getBizOrderNo',
'trans_code' => 'getTransCode',
'order_name' => 'getOrderName',
'order_desc' => 'getOrderDesc',
'amount' => 'getAmount',
'remark' => 'getRemark'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['merchant_id'] = isset($data['merchant_id']) ? $data['merchant_id'] : null;
        $this->container['live_id'] = isset($data['live_id']) ? $data['live_id'] : null;
        $this->container['biz_order_no'] = isset($data['biz_order_no']) ? $data['biz_order_no'] : null;
        $this->container['trans_code'] = isset($data['trans_code']) ? $data['trans_code'] : null;
        $this->container['order_name'] = isset($data['order_name']) ? $data['order_name'] : null;
        $this->container['order_desc'] = isset($data['order_desc']) ? $data['order_desc'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['remark'] = isset($data['remark']) ? $data['remark'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['merchant_id'] === null) {
            $invalidProperties[] = "'merchant_id' can't be null";
        }
        if ($this->container['live_id'] === null) {
            $invalidProperties[] = "'live_id' can't be null";
        }
        if ($this->container['biz_order_no'] === null) {
            $invalidProperties[] = "'biz_order_no' can't be null";
        }
        if ($this->container['trans_code'] === null) {
            $invalidProperties[] = "'trans_code' can't be null";
        }
        if ($this->container['order_name'] === null) {
            $invalidProperties[] = "'order_name' can't be null";
        }
        if ($this->container['order_desc'] === null) {
            $invalidProperties[] = "'order_desc' can't be null";
        }
        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        if ($this->container['remark'] === null) {
            $invalidProperties[] = "'remark' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets merchant_id
     *
     * @return int
     */
    public function getMerchantId()
    {
        return $this->container['merchant_id'];
    }

    /**
     * Sets merchant_id
     *
     * @param int $merchant_id 商户id
     *
     * @return $this
     */
    public function setMerchantId($merchant_id)
    {
        $this->container['merchant_id'] = $merchant_id;

        return $this;
    }

    /**
     * Gets live_id
     *
     * @return int
     */
    public function getLiveId()
    {
        return $this->container['live_id'];
    }

    /**
     * Sets live_id
     *
     * @param int $live_id 业务id
     *
     * @return $this
     */
    public function setLiveId($live_id)
    {
        $this->container['live_id'] = $live_id;

        return $this;
    }

    /**
     * Gets biz_order_no
     *
     * @return string
     */
    public function getBizOrderNo()
    {
        return $this->container['biz_order_no'];
    }

    /**
     * Sets biz_order_no
     *
     * @param string $biz_order_no 外部订单号，由调用方生成，长度小于64
     *
     * @return $this
     */
    public function setBizOrderNo($biz_order_no)
    {
        $this->container['biz_order_no'] = $biz_order_no;

        return $this;
    }

    /**
     * Gets trans_code
     *
     * @return string
     */
    public function getTransCode()
    {
        return $this->container['trans_code'];
    }

    /**
     * Sets trans_code
     *
     * @param string $trans_code 交易场景码，SEND_MONEY_REDPACKET: 红包转账 SEND_VCOIN_REDPACKET: 抖币转账
     *
     * @return $this
     */
    public function setTransCode($trans_code)
    {
        $this->container['trans_code'] = $trans_code;

        return $this;
    }

    /**
     * Gets order_name
     *
     * @return string
     */
    public function getOrderName()
    {
        return $this->container['order_name'];
    }

    /**
     * Sets order_name
     *
     * @param string $order_name 订单名称，长度小于64
     *
     * @return $this
     */
    public function setOrderName($order_name)
    {
        $this->container['order_name'] = $order_name;

        return $this;
    }

    /**
     * Gets order_desc
     *
     * @return string
     */
    public function getOrderDesc()
    {
        return $this->container['order_desc'];
    }

    /**
     * Sets order_desc
     *
     * @param string $order_desc 订单描述，长度小于256
     *
     * @return $this
     */
    public function setOrderDesc($order_desc)
    {
        $this->container['order_desc'] = $order_desc;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return int
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param int $amount 数目
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets remark
     *
     * @return string
     */
    public function getRemark()
    {
        return $this->container['remark'];
    }

    /**
     * Sets remark
     *
     * @param string $remark 标记，长度小于512
     *
     * @return $this
     */
    public function setRemark($remark)
    {
        $this->container['remark'] = $remark;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
