<?php
/**
 * PoiOrderOrderBody1
 *
 * PHP version 5
 *
 * @category Class
 * @package  swagger_client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.20
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace swagger_client\Model;

use \ArrayAccess;
use swagger_client\ObjectSerializer;

/**
 * PoiOrderOrderBody1 Class Doc Comment
 *
 * @category Class
 * @package  swagger_client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PoiOrderOrderBody1 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'body_1';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'order_id' => 'string',
'spu_ext_id' => 'string',
'status' => 'int',
'reserve_amount' => 'int',
'customer_name' => 'string',
'customer_phone' => 'string',
'customer_list' => '\swagger_client\Model\PoiOrderOrderPoiexthotelordercommitCustomerList[]',
'check_in' => 'string',
'check_out' => 'string',
'total_price' => 'int',
'remark' => 'string',
'date_price' => '\swagger_client\Model\PoiOrderOrderPoiexthotelordercommitDatePrice[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'order_id' => null,
'spu_ext_id' => null,
'status' => null,
'reserve_amount' => null,
'customer_name' => null,
'customer_phone' => null,
'customer_list' => null,
'check_in' => null,
'check_out' => null,
'total_price' => null,
'remark' => null,
'date_price' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'order_id' => 'order_id',
'spu_ext_id' => 'spu_ext_id',
'status' => 'status',
'reserve_amount' => 'reserve_amount',
'customer_name' => 'customer_name',
'customer_phone' => 'customer_phone',
'customer_list' => 'customer_list',
'check_in' => 'check_in',
'check_out' => 'check_out',
'total_price' => 'total_price',
'remark' => 'remark',
'date_price' => 'date_price'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'order_id' => 'setOrderId',
'spu_ext_id' => 'setSpuExtId',
'status' => 'setStatus',
'reserve_amount' => 'setReserveAmount',
'customer_name' => 'setCustomerName',
'customer_phone' => 'setCustomerPhone',
'customer_list' => 'setCustomerList',
'check_in' => 'setCheckIn',
'check_out' => 'setCheckOut',
'total_price' => 'setTotalPrice',
'remark' => 'setRemark',
'date_price' => 'setDatePrice'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'order_id' => 'getOrderId',
'spu_ext_id' => 'getSpuExtId',
'status' => 'getStatus',
'reserve_amount' => 'getReserveAmount',
'customer_name' => 'getCustomerName',
'customer_phone' => 'getCustomerPhone',
'customer_list' => 'getCustomerList',
'check_in' => 'getCheckIn',
'check_out' => 'getCheckOut',
'total_price' => 'getTotalPrice',
'remark' => 'getRemark',
'date_price' => 'getDatePrice'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['order_id'] = isset($data['order_id']) ? $data['order_id'] : null;
        $this->container['spu_ext_id'] = isset($data['spu_ext_id']) ? $data['spu_ext_id'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['reserve_amount'] = isset($data['reserve_amount']) ? $data['reserve_amount'] : null;
        $this->container['customer_name'] = isset($data['customer_name']) ? $data['customer_name'] : null;
        $this->container['customer_phone'] = isset($data['customer_phone']) ? $data['customer_phone'] : null;
        $this->container['customer_list'] = isset($data['customer_list']) ? $data['customer_list'] : null;
        $this->container['check_in'] = isset($data['check_in']) ? $data['check_in'] : null;
        $this->container['check_out'] = isset($data['check_out']) ? $data['check_out'] : null;
        $this->container['total_price'] = isset($data['total_price']) ? $data['total_price'] : null;
        $this->container['remark'] = isset($data['remark']) ? $data['remark'] : null;
        $this->container['date_price'] = isset($data['date_price']) ? $data['date_price'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['order_id'] === null) {
            $invalidProperties[] = "'order_id' can't be null";
        }
        if ($this->container['spu_ext_id'] === null) {
            $invalidProperties[] = "'spu_ext_id' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['reserve_amount'] === null) {
            $invalidProperties[] = "'reserve_amount' can't be null";
        }
        if ($this->container['customer_name'] === null) {
            $invalidProperties[] = "'customer_name' can't be null";
        }
        if ($this->container['customer_phone'] === null) {
            $invalidProperties[] = "'customer_phone' can't be null";
        }
        if ($this->container['check_in'] === null) {
            $invalidProperties[] = "'check_in' can't be null";
        }
        if ($this->container['check_out'] === null) {
            $invalidProperties[] = "'check_out' can't be null";
        }
        if ($this->container['total_price'] === null) {
            $invalidProperties[] = "'total_price' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets order_id
     *
     * @return string
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param string $order_id 抖音订单号
     *
     * @return $this
     */
    public function setOrderId($order_id)
    {
        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets spu_ext_id
     *
     * @return string
     */
    public function getSpuExtId()
    {
        return $this->container['spu_ext_id'];
    }

    /**
     * Sets spu_ext_id
     *
     * @param string $spu_ext_id 接入方房型ID
     *
     * @return $this
     */
    public function setSpuExtId($spu_ext_id)
    {
        $this->container['spu_ext_id'] = $spu_ext_id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return int
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param int $status 订单支付状态。0 - 未支付, 1 - 已支付
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets reserve_amount
     *
     * @return int
     */
    public function getReserveAmount()
    {
        return $this->container['reserve_amount'];
    }

    /**
     * Sets reserve_amount
     *
     * @param int $reserve_amount 预定数量
     *
     * @return $this
     */
    public function setReserveAmount($reserve_amount)
    {
        $this->container['reserve_amount'] = $reserve_amount;

        return $this;
    }

    /**
     * Gets customer_name
     *
     * @return string
     */
    public function getCustomerName()
    {
        return $this->container['customer_name'];
    }

    /**
     * Sets customer_name
     *
     * @param string $customer_name 预订人姓名
     *
     * @return $this
     */
    public function setCustomerName($customer_name)
    {
        $this->container['customer_name'] = $customer_name;

        return $this;
    }

    /**
     * Gets customer_phone
     *
     * @return string
     */
    public function getCustomerPhone()
    {
        return $this->container['customer_phone'];
    }

    /**
     * Sets customer_phone
     *
     * @param string $customer_phone 预订人电话
     *
     * @return $this
     */
    public function setCustomerPhone($customer_phone)
    {
        $this->container['customer_phone'] = $customer_phone;

        return $this;
    }

    /**
     * Gets customer_list
     *
     * @return \swagger_client\Model\PoiOrderOrderPoiexthotelordercommitCustomerList[]
     */
    public function getCustomerList()
    {
        return $this->container['customer_list'];
    }

    /**
     * Sets customer_list
     *
     * @param \swagger_client\Model\PoiOrderOrderPoiexthotelordercommitCustomerList[] $customer_list 入住人列表
     *
     * @return $this
     */
    public function setCustomerList($customer_list)
    {
        $this->container['customer_list'] = $customer_list;

        return $this;
    }

    /**
     * Gets check_in
     *
     * @return string
     */
    public function getCheckIn()
    {
        return $this->container['check_in'];
    }

    /**
     * Sets check_in
     *
     * @param string $check_in 入住时间 yyyyMMdd
     *
     * @return $this
     */
    public function setCheckIn($check_in)
    {
        $this->container['check_in'] = $check_in;

        return $this;
    }

    /**
     * Gets check_out
     *
     * @return string
     */
    public function getCheckOut()
    {
        return $this->container['check_out'];
    }

    /**
     * Sets check_out
     *
     * @param string $check_out 离店时间 yyyyMMdd
     *
     * @return $this
     */
    public function setCheckOut($check_out)
    {
        $this->container['check_out'] = $check_out;

        return $this;
    }

    /**
     * Gets total_price
     *
     * @return int
     */
    public function getTotalPrice()
    {
        return $this->container['total_price'];
    }

    /**
     * Sets total_price
     *
     * @param int $total_price 总价, 单位人民币分
     *
     * @return $this
     */
    public function setTotalPrice($total_price)
    {
        $this->container['total_price'] = $total_price;

        return $this;
    }

    /**
     * Gets remark
     *
     * @return string
     */
    public function getRemark()
    {
        return $this->container['remark'];
    }

    /**
     * Sets remark
     *
     * @param string $remark 备注
     *
     * @return $this
     */
    public function setRemark($remark)
    {
        $this->container['remark'] = $remark;

        return $this;
    }

    /**
     * Gets date_price
     *
     * @return \swagger_client\Model\PoiOrderOrderPoiexthotelordercommitDatePrice[]
     */
    public function getDatePrice()
    {
        return $this->container['date_price'];
    }

    /**
     * Sets date_price
     *
     * @param \swagger_client\Model\PoiOrderOrderPoiexthotelordercommitDatePrice[] $date_price date_price
     *
     * @return $this
     */
    public function setDatePrice($date_price)
    {
        $this->container['date_price'] = $date_price;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
