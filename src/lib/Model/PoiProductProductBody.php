<?php
/**
 * PoiProductProductBody
 *
 * PHP version 5
 *
 * @category Class
 * @package  swagger_client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.20
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace swagger_client\Model;

use \ArrayAccess;
use swagger_client\ObjectSerializer;

/**
 * PoiProductProductBody Class Doc Comment
 *
 * @category Class
 * @package  swagger_client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PoiProductProductBody implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'body';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'supplier_ext_id' => 'string',
'spu_ext_id' => 'string',
'spu_type' => 'int',
'status' => '\swagger_client\Model\PoiProductProductOnlineStatus',
'name' => 'string',
'order' => 'int',
'description' => 'string',
'attributes' => '\swagger_client\Model\PoiProductProductSpuAttributes'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'supplier_ext_id' => null,
'spu_ext_id' => null,
'spu_type' => null,
'status' => null,
'name' => null,
'order' => null,
'description' => null,
'attributes' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'supplier_ext_id' => 'supplier_ext_id',
'spu_ext_id' => 'spu_ext_id',
'spu_type' => 'spu_type',
'status' => 'status',
'name' => 'name',
'order' => 'order',
'description' => 'description',
'attributes' => 'attributes'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'supplier_ext_id' => 'setSupplierExtId',
'spu_ext_id' => 'setSpuExtId',
'spu_type' => 'setSpuType',
'status' => 'setStatus',
'name' => 'setName',
'order' => 'setOrder',
'description' => 'setDescription',
'attributes' => 'setAttributes'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'supplier_ext_id' => 'getSupplierExtId',
'spu_ext_id' => 'getSpuExtId',
'spu_type' => 'getSpuType',
'status' => 'getStatus',
'name' => 'getName',
'order' => 'getOrder',
'description' => 'getDescription',
'attributes' => 'getAttributes'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const POI_PRODUCT_PRODUCT_SPU_TYPE_1 = 1;
const POI_PRODUCT_PRODUCT_SPU_TYPE_20 = 20;
const POI_PRODUCT_PRODUCT_SPU_TYPE_21 = 21;
const POI_PRODUCT_PRODUCT_SPU_TYPE_90 = 90;
const POI_PRODUCT_PRODUCT_SPU_TYPE_91 = 91;

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSpuTypeAllowableValues()
    {
        return [
            self::POI_PRODUCT_PRODUCT_SPU_TYPE_1,
            self::POI_PRODUCT_PRODUCT_SPU_TYPE_20,
            self::POI_PRODUCT_PRODUCT_SPU_TYPE_21,
            self::POI_PRODUCT_PRODUCT_SPU_TYPE_90,
            self::POI_PRODUCT_PRODUCT_SPU_TYPE_91,''
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['supplier_ext_id'] = isset($data['supplier_ext_id']) ? $data['supplier_ext_id'] : null;
        $this->container['spu_ext_id'] = isset($data['spu_ext_id']) ? $data['spu_ext_id'] : null;
        $this->container['spu_type'] = isset($data['spu_type']) ? $data['spu_type'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['order'] = isset($data['order']) ? $data['order'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['attributes'] = isset($data['attributes']) ? $data['attributes'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['supplier_ext_id'] === null) {
            $invalidProperties[] = "'supplier_ext_id' can't be null";
        }
        if ($this->container['spu_ext_id'] === null) {
            $invalidProperties[] = "'spu_ext_id' can't be null";
        }
        $allowedValues = $this->getSpuTypeAllowableValues();
        if (!is_null($this->container['spu_type']) && !in_array($this->container['spu_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'spu_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['attributes'] === null) {
            $invalidProperties[] = "'attributes' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets supplier_ext_id
     *
     * @return string
     */
    public function getSupplierExtId()
    {
        return $this->container['supplier_ext_id'];
    }

    /**
     * Sets supplier_ext_id
     *
     * @param string $supplier_ext_id 接入方店铺ID
     *
     * @return $this
     */
    public function setSupplierExtId($supplier_ext_id)
    {
        $this->container['supplier_ext_id'] = $supplier_ext_id;

        return $this;
    }

    /**
     * Gets spu_ext_id
     *
     * @return string
     */
    public function getSpuExtId()
    {
        return $this->container['spu_ext_id'];
    }

    /**
     * Sets spu_ext_id
     *
     * @param string $spu_ext_id 接入方SPU ID
     *
     * @return $this
     */
    public function setSpuExtId($spu_ext_id)
    {
        $this->container['spu_ext_id'] = $spu_ext_id;

        return $this;
    }

    /**
     * Gets spu_type
     *
     * @return int
     */
    public function getSpuType()
    {
        return $this->container['spu_type'];
    }

    /**
     * Sets spu_type
     *
     * @param int $spu_type spu类型号，1-酒店民宿房型，90-景区门票，91-团购券 20 电商实体商品 21 电商虚拟商品
     *
     * @return $this
     */
    public function setSpuType($spu_type)
    {
        $allowedValues = $this->getSpuTypeAllowableValues();
        if (!is_null($spu_type) && !in_array($spu_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'spu_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['spu_type'] = $spu_type;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \swagger_client\Model\PoiProductProductOnlineStatus
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \swagger_client\Model\PoiProductProductOnlineStatus $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name SPU名称
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets order
     *
     * @return int
     */
    public function getOrder()
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     *
     * @param int $order SPU展示顺序,降序
     *
     * @return $this
     */
    public function setOrder($order)
    {
        $this->container['order'] = $order;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description SPU描述
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets attributes
     *
     * @return \swagger_client\Model\PoiProductProductSpuAttributes
     */
    public function getAttributes()
    {
        return $this->container['attributes'];
    }

    /**
     * Sets attributes
     *
     * @param \swagger_client\Model\PoiProductProductSpuAttributes $attributes attributes
     *
     * @return $this
     */
    public function setAttributes($attributes)
    {
        $this->container['attributes'] = $attributes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
