<?php
/**
 * StarDataStarDataInlineResponse200Data
 *
 * PHP version 5
 *
 * @category Class
 * @package  swagger_client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.20
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace swagger_client\Model;

use \ArrayAccess;
use swagger_client\ObjectSerializer;

/**
 * StarDataStarDataInlineResponse200Data Class Doc Comment
 *
 * @category Class
 * @package  swagger_client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class StarDataStarDataInlineResponse200Data implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_data';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'error_code' => '\swagger_client\Model\StarDataStarDataErrorCode',
'description' => '\swagger_client\Model\StarDataStarDataDescription',
'hot_list_update_timestamp' => 'int',
'hot_list_type' => 'int',
'hot_list_description' => 'string',
'list' => '\swagger_client\Model\StarDataStarDataInlineResponse200DataList[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'error_code' => null,
'description' => null,
'hot_list_update_timestamp' => null,
'hot_list_type' => null,
'hot_list_description' => null,
'list' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'error_code' => 'error_code',
'description' => 'description',
'hot_list_update_timestamp' => 'hot_list_update_timestamp',
'hot_list_type' => 'hot_list_type',
'hot_list_description' => 'hot_list_description',
'list' => 'list'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'error_code' => 'setErrorCode',
'description' => 'setDescription',
'hot_list_update_timestamp' => 'setHotListUpdateTimestamp',
'hot_list_type' => 'setHotListType',
'hot_list_description' => 'setHotListDescription',
'list' => 'setList'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'error_code' => 'getErrorCode',
'description' => 'getDescription',
'hot_list_update_timestamp' => 'getHotListUpdateTimestamp',
'hot_list_type' => 'getHotListType',
'hot_list_description' => 'getHotListDescription',
'list' => 'getList'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['error_code'] = isset($data['error_code']) ? $data['error_code'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['hot_list_update_timestamp'] = isset($data['hot_list_update_timestamp']) ? $data['hot_list_update_timestamp'] : null;
        $this->container['hot_list_type'] = isset($data['hot_list_type']) ? $data['hot_list_type'] : null;
        $this->container['hot_list_description'] = isset($data['hot_list_description']) ? $data['hot_list_description'] : null;
        $this->container['list'] = isset($data['list']) ? $data['list'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['error_code'] === null) {
            $invalidProperties[] = "'error_code' can't be null";
        }
        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets error_code
     *
     * @return \swagger_client\Model\StarDataStarDataErrorCode
     */
    public function getErrorCode()
    {
        return $this->container['error_code'];
    }

    /**
     * Sets error_code
     *
     * @param \swagger_client\Model\StarDataStarDataErrorCode $error_code error_code
     *
     * @return $this
     */
    public function setErrorCode($error_code)
    {
        $this->container['error_code'] = $error_code;

        return $this;
    }

    /**
     * Gets description
     *
     * @return \swagger_client\Model\StarDataStarDataDescription
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param \swagger_client\Model\StarDataStarDataDescription $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets hot_list_update_timestamp
     *
     * @return int
     */
    public function getHotListUpdateTimestamp()
    {
        return $this->container['hot_list_update_timestamp'];
    }

    /**
     * Sets hot_list_update_timestamp
     *
     * @param int $hot_list_update_timestamp 达人热榜更新时间戳
     *
     * @return $this
     */
    public function setHotListUpdateTimestamp($hot_list_update_timestamp)
    {
        $this->container['hot_list_update_timestamp'] = $hot_list_update_timestamp;

        return $this;
    }

    /**
     * Gets hot_list_type
     *
     * @return int
     */
    public function getHotListType()
    {
        return $this->container['hot_list_type'];
    }

    /**
     * Sets hot_list_type
     *
     * @param int $hot_list_type 达人热榜类型
     *
     * @return $this
     */
    public function setHotListType($hot_list_type)
    {
        $this->container['hot_list_type'] = $hot_list_type;

        return $this;
    }

    /**
     * Gets hot_list_description
     *
     * @return string
     */
    public function getHotListDescription()
    {
        return $this->container['hot_list_description'];
    }

    /**
     * Sets hot_list_description
     *
     * @param string $hot_list_description 热榜类型说明
     *
     * @return $this
     */
    public function setHotListDescription($hot_list_description)
    {
        $this->container['hot_list_description'] = $hot_list_description;

        return $this;
    }

    /**
     * Gets list
     *
     * @return \swagger_client\Model\StarDataStarDataInlineResponse200DataList[]
     */
    public function getList()
    {
        return $this->container['list'];
    }

    /**
     * Sets list
     *
     * @param \swagger_client\Model\StarDataStarDataInlineResponse200DataList[] $list list
     *
     * @return $this
     */
    public function setList($list)
    {
        $this->container['list'] = $list;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
