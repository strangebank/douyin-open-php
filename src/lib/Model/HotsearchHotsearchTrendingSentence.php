<?php
/**
 * HotsearchHotsearchTrendingSentence
 *
 * PHP version 5
 *
 * @category Class
 * @package  swagger_client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.20
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace swagger_client\Model;

use \ArrayAccess;
use swagger_client\ObjectSerializer;

/**
 * HotsearchHotsearchTrendingSentence Class Doc Comment
 *
 * @category Class
 * @package  swagger_client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class HotsearchHotsearchTrendingSentence implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'trending_sentence';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'sentence' => 'string',
'hot_level' => 'int',
'label' => 'int'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'sentence' => null,
'hot_level' => null,
'label' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'sentence' => 'sentence',
'hot_level' => 'hot_level',
'label' => 'label'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'sentence' => 'setSentence',
'hot_level' => 'setHotLevel',
'label' => 'setLabel'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'sentence' => 'getSentence',
'hot_level' => 'getHotLevel',
'label' => 'getLabel'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const HOTSEARCH_HOTSEARCH_LABEL_0 = 0;
const HOTSEARCH_HOTSEARCH_LABEL_1 = 1;
const HOTSEARCH_HOTSEARCH_LABEL_2 = 2;
const HOTSEARCH_HOTSEARCH_LABEL_3 = 3;
const HOTSEARCH_HOTSEARCH_LABEL_4 = 4;
const HOTSEARCH_HOTSEARCH_LABEL_5 = 5;

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLabelAllowableValues()
    {
        return [
            self::HOTSEARCH_HOTSEARCH_LABEL_0,
            self::HOTSEARCH_HOTSEARCH_LABEL_1,
            self::HOTSEARCH_HOTSEARCH_LABEL_2,
            self::HOTSEARCH_HOTSEARCH_LABEL_3,
            self::HOTSEARCH_HOTSEARCH_LABEL_4,
            self::HOTSEARCH_HOTSEARCH_LABEL_5,''
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['sentence'] = isset($data['sentence']) ? $data['sentence'] : null;
        $this->container['hot_level'] = isset($data['hot_level']) ? $data['hot_level'] : null;
        $this->container['label'] = isset($data['label']) ? $data['label'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['sentence'] === null) {
            $invalidProperties[] = "'sentence' can't be null";
        }
        if ($this->container['hot_level'] === null) {
            $invalidProperties[] = "'hot_level' can't be null";
        }
        if ($this->container['label'] === null) {
            $invalidProperties[] = "'label' can't be null";
        }
        $allowedValues = $this->getLabelAllowableValues();
        if (!is_null($this->container['label']) && !in_array($this->container['label'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'label', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets sentence
     *
     * @return string
     */
    public function getSentence()
    {
        return $this->container['sentence'];
    }

    /**
     * Sets sentence
     *
     * @param string $sentence 热点词
     *
     * @return $this
     */
    public function setSentence($sentence)
    {
        $this->container['sentence'] = $sentence;

        return $this;
    }

    /**
     * Gets hot_level
     *
     * @return int
     */
    public function getHotLevel()
    {
        return $this->container['hot_level'];
    }

    /**
     * Sets hot_level
     *
     * @param int $hot_level 热度 综合点赞、评论、转发等计算得出
     *
     * @return $this
     */
    public function setHotLevel($hot_level)
    {
        $this->container['hot_level'] = $hot_level;

        return $this;
    }

    /**
     * Gets label
     *
     * @return int
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     *
     * @param int $label 标签:   * `0` - 无   * `1` - 新   * `2` - 推荐   * `3` - 热   * `4` - 爆   * `5` - 首发
     *
     * @return $this
     */
    public function setLabel($label)
    {
        $allowedValues = $this->getLabelAllowableValues();
        if (!in_array($label, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'label', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['label'] = $label;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
