<?php
/**
 * PoiProductProductSpuAttributes1201
 *
 * PHP version 5
 *
 * @category Class
 * @package  swagger_client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.20
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace swagger_client\Model;

use \ArrayAccess;
use swagger_client\ObjectSerializer;

/**
 * PoiProductProductSpuAttributes1201 Class Doc Comment
 *
 * @category Class
 * @package  swagger_client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PoiProductProductSpuAttributes1201 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'spu_attributes_1201';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'code' => 'int',
'name' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'code' => null,
'name' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'code' => 'code',
'name' => 'name'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'code' => 'setCode',
'name' => 'setName'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'code' => 'getCode',
'name' => 'getName'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const POI_PRODUCT_PRODUCT_CODE_1 = 1;
const POI_PRODUCT_PRODUCT_CODE_2 = 2;
const POI_PRODUCT_PRODUCT_CODE_3 = 3;
const POI_PRODUCT_PRODUCT_CODE_4 = 4;
const POI_PRODUCT_PRODUCT_CODE_5 = 5;
const POI_PRODUCT_PRODUCT_CODE_6 = 6;
const POI_PRODUCT_PRODUCT_CODE_7 = 7;
const POI_PRODUCT_PRODUCT_CODE_8 = 8;
const POI_PRODUCT_PRODUCT_CODE_9 = 9;
const POI_PRODUCT_PRODUCT_CODE_10 = 10;
const POI_PRODUCT_PRODUCT_CODE_11 = 11;
const POI_PRODUCT_PRODUCT_CODE_12 = 12;
const POI_PRODUCT_PRODUCT_CODE_13 = 13;
const POI_PRODUCT_PRODUCT_CODE_14 = 14;
const POI_PRODUCT_PRODUCT_CODE_15 = 15;
const POI_PRODUCT_PRODUCT_CODE_16 = 16;
const POI_PRODUCT_PRODUCT_CODE_17 = 17;
const POI_PRODUCT_PRODUCT_CODE_18 = 18;
const POI_PRODUCT_PRODUCT_CODE_19 = 19;
const POI_PRODUCT_PRODUCT_CODE_20 = 20;
const POI_PRODUCT_PRODUCT_CODE_21 = 21;
const POI_PRODUCT_PRODUCT_CODE_22 = 22;
const POI_PRODUCT_PRODUCT_CODE_23 = 23;
const POI_PRODUCT_PRODUCT_CODE_24 = 24;
const POI_PRODUCT_PRODUCT_CODE_MINUS_1 = -1;

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCodeAllowableValues()
    {
        return [
            self::POI_PRODUCT_PRODUCT_CODE_1,
            self::POI_PRODUCT_PRODUCT_CODE_2,
            self::POI_PRODUCT_PRODUCT_CODE_3,
            self::POI_PRODUCT_PRODUCT_CODE_4,
            self::POI_PRODUCT_PRODUCT_CODE_5,
            self::POI_PRODUCT_PRODUCT_CODE_6,
            self::POI_PRODUCT_PRODUCT_CODE_7,
            self::POI_PRODUCT_PRODUCT_CODE_8,
            self::POI_PRODUCT_PRODUCT_CODE_9,
            self::POI_PRODUCT_PRODUCT_CODE_10,
            self::POI_PRODUCT_PRODUCT_CODE_11,
            self::POI_PRODUCT_PRODUCT_CODE_12,
            self::POI_PRODUCT_PRODUCT_CODE_13,
            self::POI_PRODUCT_PRODUCT_CODE_14,
            self::POI_PRODUCT_PRODUCT_CODE_15,
            self::POI_PRODUCT_PRODUCT_CODE_16,
            self::POI_PRODUCT_PRODUCT_CODE_17,
            self::POI_PRODUCT_PRODUCT_CODE_18,
            self::POI_PRODUCT_PRODUCT_CODE_19,
            self::POI_PRODUCT_PRODUCT_CODE_20,
            self::POI_PRODUCT_PRODUCT_CODE_21,
            self::POI_PRODUCT_PRODUCT_CODE_22,
            self::POI_PRODUCT_PRODUCT_CODE_23,
            self::POI_PRODUCT_PRODUCT_CODE_24,
            self::POI_PRODUCT_PRODUCT_CODE_MINUS_1,''
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['code'] === null) {
            $invalidProperties[] = "'code' can't be null";
        }
        $allowedValues = $this->getCodeAllowableValues();
        if (!is_null($this->container['code']) && !in_array($this->container['code'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'code', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets code
     *
     * @return int
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param int $code 设施ID(目前没用，后期可能涉及到展示设施的icon) 1 - 空调; 2 - 电视; 3 - 阳台; 4 - 窗户; 5 - 独立卫浴; 6 - 浴缸; 7 - 吹风机; 8 - 衣架; 9 - 热水; 10 - 洗衣机; 11 - 基本厨具; 12 - 冰箱; 13 - 免费Wifi; 14 - 电热水壶; 15 - 暖气; 16 - 智能马桶; 17 - 微波炉; 18 - 门禁系统; 19 - 智能门锁; 20 - 私家花园; 21 - 私家泳池; 22 - 观景露台; 23 - 免费停车; 24 - 行李寄存
     *
     * @return $this
     */
    public function setCode($code)
    {
        $allowedValues = $this->getCodeAllowableValues();
        if (!in_array($code, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'code', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name 设施名称，code ！= -1 时展示name,其他情况下展示code对应的名称。长度不超过6字符
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
