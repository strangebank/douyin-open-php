<?php
/**
 * EnterpriseGrouponGrouponGrouponDetailGrouponItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  swagger_client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 团购活动详情
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.20
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace swagger_client\Model;

use \ArrayAccess;
use swagger_client\ObjectSerializer;

/**
 * EnterpriseGrouponGrouponGrouponDetailGrouponItem Class Doc Comment
 *
 * @category Class
 * @package  swagger_client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EnterpriseGrouponGrouponGrouponDetailGrouponItem implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'groupon_item';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'groupon_id' => 'string',
'use_type' => 'int',
'code_type' => 'int',
'merchant_name' => 'string',
'service_number' => 'string',
'title' => 'string',
'cover_images' => 'string[]',
'original_amount' => 'int',
'actual_amount' => 'int',
'notification' => 'string',
'order_limit' => 'int',
'stock' => 'int',
'poi_ids' => 'string[]',
'groupon_goods' => '\swagger_client\Model\EnterpriseGrouponGrouponGrouponDetailGrouponItemGrouponGoods[]',
'start_time' => 'int',
'end_time' => 'int',
'h5_url' => 'string',
'status' => 'int',
'sold_count' => 'int',
'audit_msg' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'groupon_id' => null,
'use_type' => null,
'code_type' => null,
'merchant_name' => null,
'service_number' => null,
'title' => null,
'cover_images' => null,
'original_amount' => null,
'actual_amount' => null,
'notification' => null,
'order_limit' => null,
'stock' => null,
'poi_ids' => null,
'groupon_goods' => null,
'start_time' => 'int64',
'end_time' => 'int64',
'h5_url' => null,
'status' => null,
'sold_count' => null,
'audit_msg' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'groupon_id' => 'groupon_id',
'use_type' => 'use_type',
'code_type' => 'code_type',
'merchant_name' => 'merchant_name',
'service_number' => 'service_number',
'title' => 'title',
'cover_images' => 'cover_images',
'original_amount' => 'original_amount',
'actual_amount' => 'actual_amount',
'notification' => 'notification',
'order_limit' => 'order_limit',
'stock' => 'stock',
'poi_ids' => 'poi_ids',
'groupon_goods' => 'groupon_goods',
'start_time' => 'start_time',
'end_time' => 'end_time',
'h5_url' => 'h5_url',
'status' => 'status',
'sold_count' => 'sold_count',
'audit_msg' => 'audit_msg'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'groupon_id' => 'setGrouponId',
'use_type' => 'setUseType',
'code_type' => 'setCodeType',
'merchant_name' => 'setMerchantName',
'service_number' => 'setServiceNumber',
'title' => 'setTitle',
'cover_images' => 'setCoverImages',
'original_amount' => 'setOriginalAmount',
'actual_amount' => 'setActualAmount',
'notification' => 'setNotification',
'order_limit' => 'setOrderLimit',
'stock' => 'setStock',
'poi_ids' => 'setPoiIds',
'groupon_goods' => 'setGrouponGoods',
'start_time' => 'setStartTime',
'end_time' => 'setEndTime',
'h5_url' => 'setH5Url',
'status' => 'setStatus',
'sold_count' => 'setSoldCount',
'audit_msg' => 'setAuditMsg'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'groupon_id' => 'getGrouponId',
'use_type' => 'getUseType',
'code_type' => 'getCodeType',
'merchant_name' => 'getMerchantName',
'service_number' => 'getServiceNumber',
'title' => 'getTitle',
'cover_images' => 'getCoverImages',
'original_amount' => 'getOriginalAmount',
'actual_amount' => 'getActualAmount',
'notification' => 'getNotification',
'order_limit' => 'getOrderLimit',
'stock' => 'getStock',
'poi_ids' => 'getPoiIds',
'groupon_goods' => 'getGrouponGoods',
'start_time' => 'getStartTime',
'end_time' => 'getEndTime',
'h5_url' => 'getH5Url',
'status' => 'getStatus',
'sold_count' => 'getSoldCount',
'audit_msg' => 'getAuditMsg'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const ENTERPRISE_GROUPON_GROUPON_GROUPON_DETAIL_USE_TYPE_1 = 1;
const ENTERPRISE_GROUPON_GROUPON_GROUPON_DETAIL_CODE_TYPE_1 = 1;
const ENTERPRISE_GROUPON_GROUPON_GROUPON_DETAIL_CODE_TYPE_2 = 2;
const ENTERPRISE_GROUPON_GROUPON_GROUPON_DETAIL_STATUS_1 = 1;
const ENTERPRISE_GROUPON_GROUPON_GROUPON_DETAIL_STATUS_2 = 2;
const ENTERPRISE_GROUPON_GROUPON_GROUPON_DETAIL_STATUS_3 = 3;
const ENTERPRISE_GROUPON_GROUPON_GROUPON_DETAIL_STATUS_4 = 4;

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUseTypeAllowableValues()
    {
        return [
            self::ENTERPRISE_GROUPON_GROUPON_GROUPON_DETAIL_USE_TYPE_1,''
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCodeTypeAllowableValues()
    {
        return [
            self::ENTERPRISE_GROUPON_GROUPON_GROUPON_DETAIL_CODE_TYPE_1,
            self::ENTERPRISE_GROUPON_GROUPON_GROUPON_DETAIL_CODE_TYPE_2,''
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::ENTERPRISE_GROUPON_GROUPON_GROUPON_DETAIL_STATUS_1,
            self::ENTERPRISE_GROUPON_GROUPON_GROUPON_DETAIL_STATUS_2,
            self::ENTERPRISE_GROUPON_GROUPON_GROUPON_DETAIL_STATUS_3,
            self::ENTERPRISE_GROUPON_GROUPON_GROUPON_DETAIL_STATUS_4,''
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['groupon_id'] = isset($data['groupon_id']) ? $data['groupon_id'] : null;
        $this->container['use_type'] = isset($data['use_type']) ? $data['use_type'] : null;
        $this->container['code_type'] = isset($data['code_type']) ? $data['code_type'] : ENTERPRISE_GROUPON_GROUPON_GROUPON_DETAIL_CODE_TYPE.1;
        $this->container['merchant_name'] = isset($data['merchant_name']) ? $data['merchant_name'] : null;
        $this->container['service_number'] = isset($data['service_number']) ? $data['service_number'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['cover_images'] = isset($data['cover_images']) ? $data['cover_images'] : null;
        $this->container['original_amount'] = isset($data['original_amount']) ? $data['original_amount'] : null;
        $this->container['actual_amount'] = isset($data['actual_amount']) ? $data['actual_amount'] : null;
        $this->container['notification'] = isset($data['notification']) ? $data['notification'] : null;
        $this->container['order_limit'] = isset($data['order_limit']) ? $data['order_limit'] : null;
        $this->container['stock'] = isset($data['stock']) ? $data['stock'] : null;
        $this->container['poi_ids'] = isset($data['poi_ids']) ? $data['poi_ids'] : null;
        $this->container['groupon_goods'] = isset($data['groupon_goods']) ? $data['groupon_goods'] : null;
        $this->container['start_time'] = isset($data['start_time']) ? $data['start_time'] : null;
        $this->container['end_time'] = isset($data['end_time']) ? $data['end_time'] : null;
        $this->container['h5_url'] = isset($data['h5_url']) ? $data['h5_url'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['sold_count'] = isset($data['sold_count']) ? $data['sold_count'] : null;
        $this->container['audit_msg'] = isset($data['audit_msg']) ? $data['audit_msg'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['use_type'] === null) {
            $invalidProperties[] = "'use_type' can't be null";
        }
        $allowedValues = $this->getUseTypeAllowableValues();
        if (!is_null($this->container['use_type']) && !in_array($this->container['use_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'use_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['code_type'] === null) {
            $invalidProperties[] = "'code_type' can't be null";
        }
        $allowedValues = $this->getCodeTypeAllowableValues();
        if (!is_null($this->container['code_type']) && !in_array($this->container['code_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'code_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['merchant_name'] === null) {
            $invalidProperties[] = "'merchant_name' can't be null";
        }
        if ($this->container['service_number'] === null) {
            $invalidProperties[] = "'service_number' can't be null";
        }
        if ($this->container['title'] === null) {
            $invalidProperties[] = "'title' can't be null";
        }
        if ($this->container['cover_images'] === null) {
            $invalidProperties[] = "'cover_images' can't be null";
        }
        if ($this->container['original_amount'] === null) {
            $invalidProperties[] = "'original_amount' can't be null";
        }
        if ($this->container['actual_amount'] === null) {
            $invalidProperties[] = "'actual_amount' can't be null";
        }
        if ($this->container['notification'] === null) {
            $invalidProperties[] = "'notification' can't be null";
        }
        if ($this->container['order_limit'] === null) {
            $invalidProperties[] = "'order_limit' can't be null";
        }
        if ($this->container['stock'] === null) {
            $invalidProperties[] = "'stock' can't be null";
        }
        if ($this->container['groupon_goods'] === null) {
            $invalidProperties[] = "'groupon_goods' can't be null";
        }
        if ($this->container['start_time'] === null) {
            $invalidProperties[] = "'start_time' can't be null";
        }
        if ($this->container['end_time'] === null) {
            $invalidProperties[] = "'end_time' can't be null";
        }
        if ($this->container['h5_url'] === null) {
            $invalidProperties[] = "'h5_url' can't be null";
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets groupon_id
     *
     * @return string
     */
    public function getGrouponId()
    {
        return $this->container['groupon_id'];
    }

    /**
     * Sets groupon_id
     *
     * @param string $groupon_id 团购活动Id，审核失败修改用
     *
     * @return $this
     */
    public function setGrouponId($groupon_id)
    {
        $this->container['groupon_id'] = $groupon_id;

        return $this;
    }

    /**
     * Gets use_type
     *
     * @return int
     */
    public function getUseType()
    {
        return $this->container['use_type'];
    }

    /**
     * Sets use_type
     *
     * @param int $use_type * 团购使用方式   * 1: 到店核销
     *
     * @return $this
     */
    public function setUseType($use_type)
    {
        $allowedValues = $this->getUseTypeAllowableValues();
        if (!in_array($use_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'use_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['use_type'] = $use_type;

        return $this;
    }

    /**
     * Gets code_type
     *
     * @return int
     */
    public function getCodeType()
    {
        return $this->container['code_type'];
    }

    /**
     * Sets code_type
     *
     * @param int $code_type * 券码生成的方式   * 1: 系统生成   * 2: 自定义上传
     *
     * @return $this
     */
    public function setCodeType($code_type)
    {
        $allowedValues = $this->getCodeTypeAllowableValues();
        if (!in_array($code_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'code_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['code_type'] = $code_type;

        return $this;
    }

    /**
     * Gets merchant_name
     *
     * @return string
     */
    public function getMerchantName()
    {
        return $this->container['merchant_name'];
    }

    /**
     * Sets merchant_name
     *
     * @param string $merchant_name 商户名称
     *
     * @return $this
     */
    public function setMerchantName($merchant_name)
    {
        $this->container['merchant_name'] = $merchant_name;

        return $this;
    }

    /**
     * Gets service_number
     *
     * @return string
     */
    public function getServiceNumber()
    {
        return $this->container['service_number'];
    }

    /**
     * Sets service_number
     *
     * @param string $service_number 联系电话
     *
     * @return $this
     */
    public function setServiceNumber($service_number)
    {
        $this->container['service_number'] = $service_number;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title 卡券标题
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets cover_images
     *
     * @return string[]
     */
    public function getCoverImages()
    {
        return $this->container['cover_images'];
    }

    /**
     * Sets cover_images
     *
     * @param string[] $cover_images 封面图
     *
     * @return $this
     */
    public function setCoverImages($cover_images)
    {
        $this->container['cover_images'] = $cover_images;

        return $this;
    }

    /**
     * Gets original_amount
     *
     * @return int
     */
    public function getOriginalAmount()
    {
        return $this->container['original_amount'];
    }

    /**
     * Sets original_amount
     *
     * @param int $original_amount 原价(单位分)
     *
     * @return $this
     */
    public function setOriginalAmount($original_amount)
    {
        $this->container['original_amount'] = $original_amount;

        return $this;
    }

    /**
     * Gets actual_amount
     *
     * @return int
     */
    public function getActualAmount()
    {
        return $this->container['actual_amount'];
    }

    /**
     * Sets actual_amount
     *
     * @param int $actual_amount 实际金额(单位分)
     *
     * @return $this
     */
    public function setActualAmount($actual_amount)
    {
        $this->container['actual_amount'] = $actual_amount;

        return $this;
    }

    /**
     * Gets notification
     *
     * @return string
     */
    public function getNotification()
    {
        return $this->container['notification'];
    }

    /**
     * Sets notification
     *
     * @param string $notification 团购须知
     *
     * @return $this
     */
    public function setNotification($notification)
    {
        $this->container['notification'] = $notification;

        return $this;
    }

    /**
     * Gets order_limit
     *
     * @return int
     */
    public function getOrderLimit()
    {
        return $this->container['order_limit'];
    }

    /**
     * Sets order_limit
     *
     * @param int $order_limit 单用户购买数量上限
     *
     * @return $this
     */
    public function setOrderLimit($order_limit)
    {
        $this->container['order_limit'] = $order_limit;

        return $this;
    }

    /**
     * Gets stock
     *
     * @return int
     */
    public function getStock()
    {
        return $this->container['stock'];
    }

    /**
     * Sets stock
     *
     * @param int $stock 团购活动库存总数
     *
     * @return $this
     */
    public function setStock($stock)
    {
        $this->container['stock'] = $stock;

        return $this;
    }

    /**
     * Gets poi_ids
     *
     * @return string[]
     */
    public function getPoiIds()
    {
        return $this->container['poi_ids'];
    }

    /**
     * Sets poi_ids
     *
     * @param string[] $poi_ids * 绑定的POI 列表 默认展示全部门店
     *
     * @return $this
     */
    public function setPoiIds($poi_ids)
    {
        $this->container['poi_ids'] = $poi_ids;

        return $this;
    }

    /**
     * Gets groupon_goods
     *
     * @return \swagger_client\Model\EnterpriseGrouponGrouponGrouponDetailGrouponItemGrouponGoods[]
     */
    public function getGrouponGoods()
    {
        return $this->container['groupon_goods'];
    }

    /**
     * Sets groupon_goods
     *
     * @param \swagger_client\Model\EnterpriseGrouponGrouponGrouponDetailGrouponItemGrouponGoods[] $groupon_goods 团购商品
     *
     * @return $this
     */
    public function setGrouponGoods($groupon_goods)
    {
        $this->container['groupon_goods'] = $groupon_goods;

        return $this;
    }

    /**
     * Gets start_time
     *
     * @return int
     */
    public function getStartTime()
    {
        return $this->container['start_time'];
    }

    /**
     * Sets start_time
     *
     * @param int $start_time * 活动开始时间 unix time
     *
     * @return $this
     */
    public function setStartTime($start_time)
    {
        $this->container['start_time'] = $start_time;

        return $this;
    }

    /**
     * Gets end_time
     *
     * @return int
     */
    public function getEndTime()
    {
        return $this->container['end_time'];
    }

    /**
     * Sets end_time
     *
     * @param int $end_time * 活动截止时间 unix time
     *
     * @return $this
     */
    public function setEndTime($end_time)
    {
        $this->container['end_time'] = $end_time;

        return $this;
    }

    /**
     * Gets h5_url
     *
     * @return string
     */
    public function getH5Url()
    {
        return $this->container['h5_url'];
    }

    /**
     * Sets h5_url
     *
     * @param string $h5_url 团购活动详情页链接
     *
     * @return $this
     */
    public function setH5Url($h5_url)
    {
        $this->container['h5_url'] = $h5_url;

        return $this;
    }

    /**
     * Gets status
     *
     * @return int
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param int $status * 活动状态 创建时可以忽略  * 1：有效  * 2：审核中  * 3：审核失败  * 4：中止
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets sold_count
     *
     * @return int
     */
    public function getSoldCount()
    {
        return $this->container['sold_count'];
    }

    /**
     * Sets sold_count
     *
     * @param int $sold_count 已售出数量
     *
     * @return $this
     */
    public function setSoldCount($sold_count)
    {
        $this->container['sold_count'] = $sold_count;

        return $this;
    }

    /**
     * Gets audit_msg
     *
     * @return string
     */
    public function getAuditMsg()
    {
        return $this->container['audit_msg'];
    }

    /**
     * Sets audit_msg
     *
     * @param string $audit_msg 审核失败原因
     *
     * @return $this
     */
    public function setAuditMsg($audit_msg)
    {
        $this->container['audit_msg'] = $audit_msg;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
